<?php

namespace App\Modules\Customer\Repositories;

use App\Modules\Customer\Contracts\CustomerRepositoryContract;
use App\Modules\Customer\Entities\Customer;
use Doctrine\ORM\EntityRepository;
use Doctrine\Common\Collections\Criteria;
use Illuminate\Pagination\LengthAwarePaginator;
use LaravelDoctrine\ORM\Pagination\PaginatesFromParams;
use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;

/**
 * CustomerRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CustomerRepository extends EntityRepository implements CustomerRepositoryContract
{
    use PaginatesFromParams;

    public const LIMIT = 15;

    /**
     * @param string $order
     * @param int $limit
     * @param int $page
     * @return LengthAwarePaginator
     */
    public function all(string $order = Criteria::DESC, int $limit = self::LIMIT, int $page = 1): LengthAwarePaginator
    {
        $qb = $this->createQueryBuilder('c')
            ->orderBy('c.id', $order)
            ->getQuery();

        return $this->paginate($qb, $limit, $page);
    }

    /**
     * @param int $id
     * @return Customer|null
     */
    public function findCustomer(int $id): Customer
    {
        /** @var Customer|null $find */
        $customer = $this->findOneBy(compact($id));
        if ($customer === null) {
            throw new NotFoundHttpException(sprintf('Customer with `%s` is not found', $id));
        }
        return $customer;
    }

    /**
     * @param object $entity
     * @return void
     */
    public function saveEntity($entity): void
    {
        $this->getEntityManager()->persist($entity);
    }


    /**
     * Flush customer entity
     * @return void
     */

    public function flush(): void
    {
        $this->getEntityManager()->flush();
    }
}
